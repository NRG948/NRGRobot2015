
// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



package org.usfirst.frc.team948.robot;
import org.usfirst.frc.team948.robot.commands.CommandBase;
import org.usfirst.frc.team948.robot.commands.Delay;
import org.usfirst.frc.team948.robot.commands.DriveStraightDistance;
import org.usfirst.frc.team948.robot.commands.DriveToXY;
import org.usfirst.frc.team948.robot.commands.LiftToHeight;
import org.usfirst.frc.team948.robot.commands.PressurizePincher;
import org.usfirst.frc.team948.robot.commands.ResetSensors;
import org.usfirst.frc.team948.robot.commands.SealPincher;
import org.usfirst.frc.team948.robot.commands.TurnAngle;
import org.usfirst.frc.team948.robot.commands.TurnAngleQuick;
import org.usfirst.frc.team948.robot.commands.TurnToXY;
import org.usfirst.frc.team948.robot.commands.autogroups.LiftNextTote;
import org.usfirst.frc.team948.robot.commands.autogroups.OutdatedAutonomousThreeTotes;
import org.usfirst.frc.team948.robot.commands.autogroups.AutonomousThreeTotes;
import org.usfirst.frc.team948.robot.commands.autogroups.PostAutoReacquireStack;
import org.usfirst.frc.team948.robot.commands.tests.DriveAndDeflectOnly;
import org.usfirst.frc.team948.robot.subsystems.ScissorLift;
import org.usfirst.frc.team948.robot.subsystems.ScissorLift.Level;
import org.usfirst.frc.team948.robot.utilities.DSButton;
import org.usfirst.frc.team948.robot.utilities.MathHelper;
import org.usfirst.frc.team948.robot.utilities.PositionTracker;

import com.ni.vision.NIVision;
import com.ni.vision.NIVision.DrawMode;
import com.ni.vision.NIVision.Image;
import com.ni.vision.NIVision.ShapeMode;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	public static boolean contestRobot = true;
	public static boolean isAutoThreeToteFinished;
	private static boolean hasLifted = false;
	int session;
    Command pressurizePincher;
    Command sealPincher;
    Command autonomous;
    Command postAuto;
    //CameraServer server;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
	public void robotInit() {
    	RobotMap.init();
        // OI must be constructed after subsystems. If the OI creates Commands 
        //(which it very likely will), subsystems are not guaranteed to be 
        // constructed yet. Thus, their requires() statements may grab null 
        // pointers. Bad news. Don't move it.
    	
    //	server = CameraServer.getInstance();
       // server.setQuality(0);
        //the camera name (ex "cam0") can be found through the roborio web interface
      //  server.startAutomaticCapture("cam0");
	    DS2015.buttonInit();
	    pressurizePincher =  new PressurizePincher();
	    sealPincher = new SealPincher();
	    //CameraServer.getInstance().startAutomaticCapture("cam0");
	    SmartDashboard.putNumber("Number of totes", 3);
    	SmartDashboard.putBoolean("Bin at position 0", true);
    	SmartDashboard.putBoolean("Bin at position 1", true);
    	SmartDashboard.putBoolean("Deflect Left", true);
    	SmartDashboard.putBoolean("Post Auto", true);
    	SmartDashboard.putBoolean("Quick Lift",true);
    	SmartDashboard.putNumber("Angle To Turn", 95);
    	isAutoThreeToteFinished = false;
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
	public void disabledInit(){
        sealPincher.start();
        System.out.println("I'm Disabled");
    }

    @Override
	public void disabledPeriodic() {
        Scheduler.getInstance().run();
        periodicAll();
    }

    @Override
	public void autonomousInit() {
    	isAutoThreeToteFinished = false;
    	pressurizePincher.start();
    	
    	// schedule the autonomous command
    	
    	if (DS2015.isAutoEnabled.get()) {
    		
    		if(DS2015.autoThreeTotes.get() || DS2015.autoThreeTotesCoopertition.get() || DS2015.autoThreeTotesElimination.get()) {
    			boolean[] bins = { 
    			      SmartDashboard.getBoolean("Bin at position 0"), 
  					  SmartDashboard.getBoolean("Bin at position 1")
  					  };
    			
    			autonomous = new AutonomousThreeTotes( 
        				(int) SmartDashboard.getNumber("Number of totes"), 
        				bins, SmartDashboard.getNumber("Angle To Turn"),
        				SmartDashboard.getBoolean("Deflect Left"));
    		} else if (DS2015.driveToAutoZone.get()) {
    			autonomous = new DriveStraightDistance(0.8, 8.3);
    		}
    		
    	} else {
    		autonomous = new LiftToHeight(ScissorLift.Level.OneTote.voltage);
    	}

		autonomous.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
	public void autonomousPeriodic() {
        Scheduler.getInstance().run();
//        System.out.println("Autonomous Running!");
        periodicAll();
    }

    @Override
	public void teleopInit() {
    	/* DSButton[] buttons = {
    			DS2015.isAutoEnabled,
    			DS2015.unassigned,
    			DS2015.autoThreeTotes, 
    			DS2015.autoThreeTotesCoopertition,
    			DS2015.autoThreeTotesElimination,
    			DS2015.driveToAutoZone
    			}; */
    	
    	
    	if (isAutoThreeToteFinished && (DS2015.autoThreeTotesCoopertition.get() || DS2015.autoThreeTotesElimination.get())) {
    		postAuto = new PostAutoReacquireStack(DS2015.autoThreeTotesCoopertition.get());
    		postAuto.start();
    		isAutoThreeToteFinished = false;
    	}
    	
    	pressurizePincher.start();
    	SmartDashboard.putData("Power Turn Angle", new TurnAngle(90,0.65,1.5));
    	SmartDashboard.putData("Drive To XY", new DriveToXY(-5, 7, 0.8));
    	SmartDashboard.putData("Turn To XY", new TurnToXY(0.8,27,13.5,8.0));
    	SmartDashboard.putData("Drive 3 feet fwd", new DriveStraightDistance(0, 0.9, 3));
    	SmartDashboard.putData("Drive 3 feet bwd", new DriveStraightDistance(0, -0.9, 3));
    	SmartDashboard.putData("Seal Pincher", new SealPincher());
    	SmartDashboard.putData("Test Turn", new TurnAngle(
    			CommandBase.preferences.getDouble("TestTurnAngle", 90),
    			CommandBase.preferences.getDouble("TestTurnSpeed", 0.7),
    			CommandBase.preferences.getDouble("TestTurnTolerance", 5)));
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
	public void teleopPeriodic() {
        Scheduler.getInstance().run();
        periodicAll();
        
        if(DS2015.autoLift.get() && !RobotMap.nextToteSensor.get() && !hasLifted){
        	Command autoLift = new LiftNextTote(2){
        		@Override
        		protected void initialize(){
        			super.initialize();
        			hasLifted = true;
        		}
        		@Override
        		protected void end(){
        			super.end();
        			hasLifted = false;
        		}
        		@Override
        		protected void interrupted(){
        			super.end();
        			hasLifted = false;
        		}
        		
        	};
        	autoLift.start();
        }
        
    }

    /**
     * This function is called periodically during test mode
     */
    @Override
	public void testPeriodic() {
        LiveWindow.run();
    }
    
    public void periodicAll(){
    	CommandBase.positionTracker.update();
    	
    	double x = CommandBase.positionTracker.getX();
    	double y = CommandBase.positionTracker.getY();	
    	SmartDashboard.putNumber("X", x);
    	SmartDashboard.putNumber("Y",y);
    	// double x2 = CommandBase.positionTracker.getX2();
    	// double y2 = CommandBase.positionTracker.getY2();
    	PIDController drivePid = CommandBase.drive.getPIDController();
    	SmartDashboard.putNumber("Drive PID Error", MathHelper.roundTo(3, drivePid.getError()));
    	SmartDashboard.putNumber("Drive PID Output", MathHelper.roundTo(3, CommandBase.drive.getPidOutput()));
    	SmartDashboard.putNumber("Pot Value", MathHelper.roundTo(3, RobotMap.scissorLiftPotentiometer.get()));
    	SmartDashboard.putBoolean("Upper Limit", RobotMap.upperLifterMovement.get());
    	SmartDashboard.putBoolean("Lower Limit", RobotMap.lowerLifterMovement.get());
    	SmartDashboard.putBoolean("Back Button", RobotMap.nextToteSensor.get());
    	SmartDashboard.putNumber("Gyro", MathHelper.roundTo(3, RobotMap.driveGyro.getAngle()));
    	//SmartDashboard.putNumber("Desired Heading", MathHelper.roundTo(3, CommandBase.drive.getDesiredHeading()));
    	//SmartDashboard.putNumber("Back IR Value", RobotMap.backIR.getVoltage());   
    	SmartDashboard.putNumber("Lift output", MathHelper.roundTo(3, CommandBase.scissorLift.pidOutput));
    	SmartDashboard.putNumber("Lift error", MathHelper.roundTo(3, CommandBase.scissorLift.getPIDController().getError()));
    	
       	SmartDashboard.putNumber("LaunchPad # of buttons", DS2015.launchPad.getButtonCount());
       	SmartDashboard.putBoolean("isAutoEnabled", DS2015.isAutoEnabled.get());
    	SmartDashboard.putBoolean("Auto Lift", DS2015.autoLift.get());
    	SmartDashboard.putBoolean("autoThreeTotes", DS2015.autoThreeTotes.get());
    	SmartDashboard.putBoolean("autoThreeTotesCoopertition", DS2015.autoThreeTotesCoopertition.get());
    	SmartDashboard.putBoolean("autoThreeTotesElimination", DS2015.autoThreeTotesElimination.get());
    	SmartDashboard.putBoolean("driveToAutoZone", DS2015.driveToAutoZone.get());

        if(Math.abs(RobotMap.scissorLiftPotentiometer.get() - ScissorLift.Level.Step.voltage) < 0.03 && 
        		(CommandBase.ds.getXboxRT() != 0 || CommandBase.ds.getXboxLT() != 0)){
        	DS2015.xboxController.setRumble(Joystick.RumbleType.kLeftRumble, 1);
        }else
        	DS2015.xboxController.	setRumble(Joystick.RumbleType.kLeftRumble, 0);
        if(!RobotMap.nextToteSensor.get() && 
        		(CommandBase.ds.getXboxLY() > 0 || CommandBase.ds.getXboxRY() > 0)){
        	DS2015.xboxController.setRumble(Joystick.RumbleType.kRightRumble, 1);
        }else
        	DS2015.xboxController.setRumble(Joystick.RumbleType.kRightRumble, 0);
        
        DS2015.launchPad.setOutputs(0);
        double currentLevel = CommandBase.scissorLift.findCurrentLevel(RobotMap.scissorLiftPotentiometer.get());
        int a = (int)(currentLevel + 0.5);
        int b = (int)(currentLevel);
        int[] ledPorts = {0,4,5,6,3,2};
        DS2015.launchPad.setOutput(ledPorts[a], true);
        DS2015.launchPad.setOutput(ledPorts[b], true);
        
        CommandBase.positionTracker.update();
    }
}
